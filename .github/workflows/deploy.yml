name: Deploy Go Lambda Function

on:
  push:
    branches:
      - master

permissions:
  id-token: write
  contents: read

jobs:
  generate-lambda-zip:
    runs-on: ubuntu-latest
    outputs:
      lambda_bucket_name: ${{ steps.read-output.outputs.lambda_bucket_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Generate Lambda ZIP
        run: |
          # Build your Go Lambda code
          go build -o main
          zip -j lambda.zip main
          echo "Lambda ZIP generated successfully"
        working-directory: ${{ github.workspace }}

      - name: Upload Lambda ZIP Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lambda-artifact
          path: ./lambda.zip

      - name: Capture Terraform Output
        run: |
          echo "lambda_bucket_name=$(terraform output -raw lambda_bucket_name)" >> output.txt
          echo $(terraform output -raw)
        working-directory: ./terraform/stage_1

      - name: Read Terraform Output
        id: read-output
        run: |
          echo "::set-output name=lambda_bucket_name::$(cat output.txt)"
        working-directory: ./terraform/stage_1

  deploy:
    runs-on: ubuntu-latest

    needs: generate-lambda-zip

    env:
      AWS_DEFAULT_REGION: us-east-1


    steps:
      - name: configureawscredentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::726032046446:role/github-actions-role
          role-session-name: samplerolesession
          aws-region: ${{env.AWS_DEFAULT_REGION}}
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.x

      - name: Download Lambda ZIP Artifact
        uses: actions/download-artifact@v2
        with:
          name: lambda-artifact
          path: ./lambda.zip

      - name: Terraform Apply Stage 1
        run: |
          cd ./terraform/stage_1
          terraform init
          terraform apply -auto-approve

      - name: Upload Lambda Code to S3
        run: |
          aws s3 cp lambda.zip s3://${{ needs.generate-lambda-zip.outputs.lambda_bucket_name }}/lambda.zip
        if: success()

      - name: Terraform Apply Stage 2
        run: |
          cd ./terraform/stage_2
          terraform init
          terraform apply -auto-approve

      - name: Deploy Lambda Code
        run: |
          aws lambda update-function-code --function-name ${{ needs.deploy.outputs.lambda_function_name }} --s3-bucket ${{ needs.deploy.outputs.lambda_bucket_name }} --s3-key lambda.zip
        if: success()

      - name: Clean Up
        run: terraform destroy -auto-approve ./terraform
        if: always()
