name: Deploy Go Lambda Function

on:
  push:
    branches:
      - master

permissions:
  id-token: write
  contents: read

jobs:
  generate-lambda-zip:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Build and tag Docker image
        run: |
          docker buildx create --use
          docker buildx build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-ecr-repo:latest -f Dockerfile .
        env:
          DOCKER_CLI_AWS_REGION: ${{ secrets.AWS_REGION }}
          DOCKER_CLI_AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Push Docker image to AWS ECR
        run: |
          docker buildx use default
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/resum-api-lambda-repo:latest
        env:
          DOCKER_CLI_AWS_REGION: ${{ secrets.AWS_REGION }}
          DOCKER_CLI_AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

  deploy:
    runs-on: ubuntu-latest

    needs: generate-lambda-zip

    outputs:
      lambda_bucket_name: ${{ steps.read-output.outputs.lambda_bucket_name }}

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1

    steps:
      - name: configureawscredentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::726032046446:role/github-actions-role
          role-session-name: samplerolesession
          aws-region: ${{env.AWS_DEFAULT_REGION}}

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.x

      - name: Download Lambda ZIP Artifact
        uses: actions/download-artifact@v2
        with:
          name: lambda-artifact
          path: ./lambda.zip

      - name: Terraform Apply
        run: |
          cd ./terraform
          terraform init
          terraform apply -auto-approve
        continue-on-error: true

      - name: Build Go code inside the Docker container
        run: |
          docker run -v $GITHUB_WORKSPACE:/app -w /app ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-ecr-repo:latest go build -o main
          zip -j lambda.zip main
          echo "Lambda ZIP generated successfully"
        working-directory: ${{ github.workspace }}

      - name: Deploy Lambda Code
        run: |
          aws lambda update-function-code --function-name "resum-api-lambda-resum-api-master" --zip-file "fileb://lambda.zip"
        if: failure()
